// lib/data/services/partnership_service.dart - Enhanced with comprehensive refresh
import 'dart:async';
import 'dart:math';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_database/firebase_database.dart';
import 'package:flutter/foundation.dart';
import 'package:moneysun/data/models/partnership_model.dart';
import 'package:moneysun/data/models/user_model.dart';
import 'package:moneysun/data/providers/user_provider.dart';
import 'package:moneysun/data/services/data_service.dart';

class PartnershipService {
  static final PartnershipService _instance = PartnershipService._internal();
  factory PartnershipService() => _instance;
  PartnershipService._internal();

  final DatabaseReference _dbRef = FirebaseDatabase.instance.ref();
  final FirebaseAuth _auth = FirebaseAuth.instance;
  final DataService _dataService = DataService();

  // ============ INVITE CODE MANAGEMENT ============

  Future<String> generateInviteCode(UserProvider userProvider) async {
    if (userProvider.currentUser == null) {
      throw Exception('Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p');
    }

    if (userProvider.hasPartner) {
      throw Exception('B·∫°n ƒë√£ c√≥ ƒë·ªëi t√°c r·ªìi');
    }

    try {
      debugPrint('üîó ƒêang t·∫°o m√£ m·ªùi...');

      await _clearUserInviteCode(userProvider.currentUser!.uid);

      String inviteCode;
      bool isUnique = false;
      int attempts = 0;
      const maxAttempts = 10;

      do {
        inviteCode = _generateRandomCode();
        isUnique = await _checkInviteCodeUniqueness(inviteCode);
        attempts++;

        if (!isUnique && attempts < maxAttempts) {
          await Future.delayed(Duration(milliseconds: 100 * attempts));
        }
      } while (!isUnique && attempts < maxAttempts);

      if (!isUnique) {
        throw Exception('Kh√¥ng th·ªÉ t·∫°o m√£ m·ªùi duy nh·∫•t. Vui l√≤ng th·ª≠ l·∫°i.');
      }

      final expiryTime = DateTime.now().add(const Duration(hours: 24));

      await _dbRef.child('inviteCodes').child(inviteCode).set({
        'userId': userProvider.currentUser!.uid,
        'userDisplayName':
            userProvider.currentUser!.displayName ?? 'Ng∆∞·ªùi d√πng',
        'userEmail': userProvider.currentUser!.email ?? '',
        'expiryTime': expiryTime.millisecondsSinceEpoch,
        'createdAt': ServerValue.timestamp,
        'isActive': true,
      });

      await _dbRef.child('users').child(userProvider.currentUser!.uid).update({
        'currentInviteCode': inviteCode,
        'inviteCodeExpiry': expiryTime.millisecondsSinceEpoch,
        'updatedAt': ServerValue.timestamp,
      });

      debugPrint(
        '‚úÖ M√£ m·ªùi ƒë√£ t·∫°o: $inviteCode (h·∫øt h·∫°n: ${expiryTime.toLocal()})',
      );
      return inviteCode;
    } catch (e) {
      debugPrint('‚ùå L·ªói khi t·∫°o m√£ m·ªùi: $e');
      rethrow;
    }
  }

  /// ‚úÖ FIXED: Accept invitation with comprehensive refresh
  Future<void> acceptInvitation(
    String inviteCode,
    UserProvider userProvider,
  ) async {
    if (userProvider.currentUser == null) {
      throw Exception('Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p');
    }

    if (userProvider.hasPartner) {
      throw Exception('B·∫°n ƒë√£ c√≥ ƒë·ªëi t√°c r·ªìi');
    }

    if (inviteCode.length != 6) {
      throw Exception('M√£ m·ªùi ph·∫£i c√≥ 6 k√Ω t·ª±');
    }

    try {
      debugPrint('ü§ù ƒêang x·ª≠ l√Ω m√£ m·ªùi: $inviteCode');

      // Find invite code
      final codeSnapshot = await _dbRef
          .child('inviteCodes')
          .child(inviteCode.toUpperCase())
          .get();

      if (!codeSnapshot.exists) {
        throw Exception('M√£ m·ªùi kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ h·∫øt h·∫°n');
      }

      final codeData = codeSnapshot.value as Map<dynamic, dynamic>;

      // Validate invite code
      await _validateInviteCode(codeData, userProvider);

      final inviterUid = codeData['userId'] as String;

      // Get inviter's data
      final inviterSnapshot = await _dbRef
          .child('users')
          .child(inviterUid)
          .get();

      if (!inviterSnapshot.exists) {
        throw Exception('Ng∆∞·ªùi t·∫°o m√£ m·ªùi kh√¥ng t·ªìn t·∫°i');
      }

      final inviterData = inviterSnapshot.value as Map<dynamic, dynamic>;

      // Final validation
      await _validateInvitation(inviterUid, inviterData, userProvider);

      // Create partnership
      final partnershipId =
          'partnership_${DateTime.now().millisecondsSinceEpoch}_${Random().nextInt(9999)}';
      final partnershipCreationTime = DateTime.now();

      final partnership = Partnership(
        id: partnershipId,
        memberIds: [inviterUid, userProvider.currentUser!.uid],
        createdAt: partnershipCreationTime,
        memberNames: {
          inviterUid: inviterData['displayName']?.toString() ?? 'Ng∆∞·ªùi d√πng',
          userProvider.currentUser!.uid:
              userProvider.currentUser!.displayName ?? 'Ng∆∞·ªùi d√πng',
        },
        isActive: true,
      );

      // Double-check before proceeding
      final inviterCheck = await _dbRef.child('users/$inviterUid').get();
      final currentUserCheck = await _dbRef
          .child('users/${userProvider.currentUser!.uid}')
          .get();

      final inviterCurrentData =
          inviterCheck.value as Map<dynamic, dynamic>? ?? {};
      final currentUserCurrentData =
          currentUserCheck.value as Map<dynamic, dynamic>? ?? {};

      if (inviterCurrentData['partnershipId'] != null) {
        throw Exception('Ng∆∞·ªùi t·∫°o m√£ m·ªùi ƒë√£ c√≥ ƒë·ªëi t√°c');
      }

      if (currentUserCurrentData['partnershipId'] != null) {
        throw Exception('B·∫°n ƒë√£ c√≥ ƒë·ªëi t√°c');
      }

      // ‚úÖ STEP 1: Execute partnership creation
      debugPrint('üîß Executing partnership creation...');
      await _executePartnershipCreation(
        partnership,
        inviterUid,
        userProvider,
        inviteCode,
        inviterData,
      );

      // ‚úÖ STEP 2: Force refresh UserProvider and WAIT for completion
      debugPrint('üîÑ Force refreshing UserProvider...');
      await _forceRefreshUserProviderAndWait(userProvider, partnershipId);

      // ‚úÖ STEP 3: Force sync DataService
      debugPrint('üîÑ Force syncing DataService...');
      await _forceSyncDataService();

      // ‚úÖ STEP 4: Final UI update trigger
      debugPrint('üì¢ Triggering final UI updates...');
      await Future.delayed(const Duration(milliseconds: 300));

      debugPrint('‚úÖ Partnership acceptance completed successfully');
    } catch (e) {
      debugPrint('‚ùå L·ªói khi ch·∫•p nh·∫≠n m·ªùi: $e');
      rethrow;
    }
  }

  Future<void> _executePartnershipCreation(
    Partnership partnership,
    String inviterUid,
    UserProvider userProvider,
    String inviteCode,
    Map<dynamic, dynamic> inviterData,
  ) async {
    final partnershipId = partnership.id;
    final currentUid = userProvider.currentUser!.uid;
    final timestamp = ServerValue.timestamp;
    final partnershipTimestamp = partnership.createdAt.millisecondsSinceEpoch;

    debugPrint('üîß Creating partnership: $partnershipId');
    debugPrint('   Inviter: $inviterUid');
    debugPrint('   Accepter: $currentUid');

    try {
      // ‚úÖ STEP 1: Create partnership record with CORRECT structure
      await _dbRef.child('partnerships').child(partnershipId).set({
        'id': partnershipId,
        // ‚úÖ FIX: Use memberIds (not members)
        'memberIds': {inviterUid: true, currentUid: true},
        'createdAt': partnershipTimestamp,
        'memberNames': {
          inviterUid: partnership.memberNames[inviterUid],
          currentUid: partnership.memberNames[currentUid],
        },
        'isActive': true,
        'lastSyncTime': timestamp,
      });
      debugPrint('‚úÖ Partnership record created');

      // ‚úÖ STEP 2: Update both users
      final userUpdates = <String, dynamic>{
        // Inviter updates
        'users/$inviterUid/partnershipId': partnershipId,
        'users/$inviterUid/partnerUid': currentUid,
        'users/$inviterUid/partnerDisplayName':
            userProvider.currentUser!.displayName ?? 'Ng∆∞·ªùi d√πng',
        'users/$inviterUid/partnerPhotoURL': userProvider.currentUser!.photoURL,
        'users/$inviterUid/partnershipCreatedAt': partnershipTimestamp,
        'users/$inviterUid/currentInviteCode': null,
        'users/$inviterUid/inviteCodeExpiry': null,
        'users/$inviterUid/updatedAt': timestamp,
        'users/$inviterUid/lastPartnerUpdate': timestamp,

        // Accepter updates
        'users/$currentUid/partnershipId': partnershipId,
        'users/$currentUid/partnerUid': inviterUid,
        'users/$currentUid/partnerDisplayName':
            inviterData['displayName']?.toString() ?? 'Ng∆∞·ªùi d√πng',
        'users/$currentUid/partnerPhotoURL': inviterData['photoURL']
            ?.toString(),
        'users/$currentUid/partnershipCreatedAt': partnershipTimestamp,
        'users/$currentUid/updatedAt': timestamp,
        'users/$currentUid/lastPartnerUpdate': timestamp,

        // Remove invite code
        'inviteCodes/$inviteCode': null,
      };

      await _dbRef.update(userUpdates);
      debugPrint('‚úÖ Both users updated in Firebase');

      // ‚úÖ VERIFY: Check if updates were successful
      final verifyInviter = await _dbRef
          .child('users/$inviterUid/partnershipId')
          .get();
      final verifyAccepter = await _dbRef
          .child('users/$currentUid/partnershipId')
          .get();

      debugPrint('üîç Verification:');
      debugPrint('   Inviter partnershipId: ${verifyInviter.value}');
      debugPrint('   Accepter partnershipId: ${verifyAccepter.value}');

      // Continue with notifications...
      await _sendRefreshTriggersToUsers(inviterUid, currentUid, partnershipId);
      await _sendPartnershipNotifications(
        inviterUid,
        currentUid,
        userProvider.currentUser!.displayName ?? 'Ng∆∞·ªùi d√πng',
        inviterData['displayName']?.toString() ?? 'Ng∆∞·ªùi d√πng',
      );
      await _triggerGlobalPartnershipUpdate(partnershipId, [
        inviterUid,
        currentUid,
      ]);

      debugPrint('‚úÖ Partnership creation completed successfully');
    } catch (e, stackTrace) {
      debugPrint('‚ùå Error in partnership creation: $e');
      debugPrint('Stack trace: $stackTrace');
      rethrow;
    }
  }

  Future<void> _sendRefreshTriggersToUsers(
    String inviterUid,
    String currentUid,
    String partnershipId,
  ) async {
    try {
      debugPrint('üì§ Sending HIGH PRIORITY refresh triggers to both users...');

      final refreshData = {
        'type': 'partnership_created',
        'partnershipId': partnershipId,
        'timestamp': ServerValue.timestamp,
        'requireRefresh': true,
        'priority': 'high',
        'forceReload': true,
      };

      // Send to both users simultaneously
      await Future.wait([
        _dbRef
            .child('user_refresh_triggers')
            .child(inviterUid)
            .push()
            .set(refreshData),
        _dbRef
            .child('user_refresh_triggers')
            .child(currentUid)
            .push()
            .set(refreshData),
      ]);

      debugPrint('‚úÖ HIGH-PRIORITY refresh triggers sent to both users');
    } catch (e) {
      debugPrint('‚ùå Error sending refresh triggers: $e');
    }
  }

  /// ‚úÖ NEW: Trigger global partnership update
  Future<void> _triggerGlobalPartnershipUpdate(
    String partnershipId,
    List<String> affectedUsers,
  ) async {
    try {
      debugPrint('üåê Triggering global partnership update...');

      await _dbRef.child('partnership_updates').push().set({
        'type': 'partnership_created',
        'partnershipId': partnershipId,
        'affectedUsers': affectedUsers,
        'timestamp': ServerValue.timestamp,
        'priority': 'high',
      });

      debugPrint('‚úÖ Global partnership update triggered');
    } catch (e) {
      debugPrint('‚ùå Error triggering global update: $e');
    }
  }

  /// ‚úÖ ENHANCED: Send notifications with action data
  Future<void> _sendPartnershipNotifications(
    String inviterUid,
    String currentUid,
    String currentUserName,
    String inviterName,
  ) async {
    try {
      final timestamp = ServerValue.timestamp;

      // ‚úÖ High-priority notification for INVITER
      await _dbRef.child('user_notifications').child(inviterUid).push().set({
        'title': 'K·∫øt n·ªëi th√†nh c√¥ng! üéâ',
        'body': '$currentUserName ƒë√£ ch·∫•p nh·∫≠n l·ªùi m·ªùi k·∫øt n·ªëi c·ªßa b·∫°n.',
        'type': 'partnership_accepted',
        'timestamp': timestamp,
        'isRead': false,
        'priority': 'high',
        'requiresAction': true,
        'actionData': {
          'partnerUid': currentUid,
          'partnerName': currentUserName,
          'action': 'refresh_partnership',
        },
      });

      // Notification for accepter
      await _dbRef.child('user_notifications').child(currentUid).push().set({
        'title': 'K·∫øt n·ªëi th√†nh c√¥ng! üéâ',
        'body': 'B·∫°n ƒë√£ k·∫øt n·ªëi th√†nh c√¥ng v·ªõi $inviterName.',
        'type': 'partnership_connected',
        'timestamp': timestamp,
        'isRead': false,
        'priority': 'high',
        'requiresAction': true,
        'actionData': {
          'partnerUid': inviterUid,
          'partnerName': inviterName,
          'action': 'refresh_partnership',
        },
      });

      debugPrint('‚úÖ High-priority notifications sent to both users');
    } catch (e) {
      debugPrint('‚ùå Error sending notifications: $e');
    }
  }

  /// ‚úÖ NEW: Force refresh UserProvider and WAIT for completion
  Future<void> _forceRefreshUserProviderAndWait(
    UserProvider userProvider,
    String expectedPartnershipId,
  ) async {
    debugPrint('üîÑ Force refreshing UserProvider and waiting...');

    // Trigger first refresh
    await userProvider.refreshUser();

    // Wait up to 5 seconds for partnership to be set
    final stopwatch = Stopwatch()..start();
    int refreshCount = 0;

    while (userProvider.partnershipId != expectedPartnershipId &&
        stopwatch.elapsed.inSeconds < 5) {
      await Future.delayed(const Duration(milliseconds: 100));
      await userProvider.refreshUser();
      refreshCount++;
    }

    if (userProvider.partnershipId == expectedPartnershipId) {
      debugPrint(
        '‚úÖ UserProvider updated with partnership after $refreshCount attempts',
      );
    } else {
      debugPrint(
        '‚ö†Ô∏è UserProvider update timeout after $refreshCount attempts - but continuing',
      );
    }
  }

  /// ‚úÖ NEW: Force sync DataService
  Future<void> _forceSyncDataService() async {
    debugPrint('üîÑ Force syncing DataService...');

    if (!_dataService.isInitialized || !_dataService.isOnline) {
      debugPrint('‚ö†Ô∏è DataService not ready for sync');
      return;
    }

    try {
      await _dataService.forceSyncNow();

      // Wait for Firebase propagation
      await Future.delayed(const Duration(milliseconds: 500));

      debugPrint('‚úÖ DataService sync completed');
    } catch (e) {
      debugPrint('‚ùå Error syncing DataService: $e');
    }
  }

  // ============ DISCONNECT PARTNERSHIP ============

  Future<void> disconnectPartnership(UserProvider userProvider) async {
    if (userProvider.currentUser == null) {
      throw Exception('Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p');
    }

    if (!userProvider.hasPartner) {
      throw Exception('B·∫°n kh√¥ng c√≥ ƒë·ªëi t√°c ƒë·ªÉ ng·∫Øt k·∫øt n·ªëi');
    }

    try {
      debugPrint('üíî ƒêang ng·∫Øt k·∫øt n·ªëi partnership...');

      final partnershipId = userProvider.partnershipId!;
      final partnerUid = userProvider.partnerUid!;
      final currentUid = userProvider.currentUser!.uid;

      final updates = <String, dynamic>{
        'user_notifications/$partnerUid/${_dbRef.push().key}': {
          'title': 'K·∫øt n·ªëi ƒë√£ b·ªã ng·∫Øt',
          'body':
              '${userProvider.currentUser!.displayName ?? "ƒê·ªëi t√°c"} ƒë√£ ng·∫Øt k·∫øt n·ªëi v·ªõi b·∫°n.',
          'timestamp': ServerValue.timestamp,
          'type': 'partnership_disconnected',
          'isRead': false,
        },
        'users/$currentUid/partnershipId': null,
        'users/$currentUid/partnerUid': null,
        'users/$currentUid/partnerDisplayName': null,
        'users/$currentUid/partnershipCreatedAt': null,
        'users/$currentUid/updatedAt': ServerValue.timestamp,
        'users/$partnerUid/partnershipId': null,
        'users/$partnerUid/partnerUid': null,
        'users/$partnerUid/partnerDisplayName': null,
        'users/$partnerUid/partnershipCreatedAt': null,
        'users/$partnerUid/updatedAt': ServerValue.timestamp,
        'partnerships/$partnershipId/isActive': false,
        'partnerships/$partnershipId/disconnectedAt': ServerValue.timestamp,
        'partnerships/$partnershipId/disconnectedBy': currentUid,
      };

      await _dbRef.update(updates);

      if (_dataService.isInitialized && _dataService.isOnline) {
        unawaited(_dataService.forceSyncNow());
      }

      debugPrint('‚úÖ Partnership ƒë√£ ng·∫Øt k·∫øt n·ªëi th√†nh c√¥ng');
    } catch (e) {
      debugPrint('‚ùå L·ªói khi ng·∫Øt k·∫øt n·ªëi partnership: $e');
      rethrow;
    }
  }

  // ============ VALIDATION METHODS ============

  Future<void> _validateInviteCode(
    Map<dynamic, dynamic> codeData,
    UserProvider userProvider,
  ) async {
    if (codeData['isActive'] != true) {
      throw Exception('M√£ m·ªùi kh√¥ng c√≤n ho·∫°t ƒë·ªông');
    }

    final inviterUid = codeData['userId'] as String;
    if (inviterUid == userProvider.currentUser!.uid) {
      throw Exception('B·∫°n kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi ch√≠nh m√¨nh');
    }

    final expiry = codeData['expiryTime'] as int?;
    if (expiry != null && DateTime.now().millisecondsSinceEpoch > expiry) {
      final inviteCode = codeData.keys.first;
      unawaited(_clearExpiredInviteCode(inviteCode.toString()));
      throw Exception('M√£ m·ªùi ƒë√£ h·∫øt h·∫°n');
    }
  }

  Future<void> _validateInvitation(
    String inviterUid,
    Map<dynamic, dynamic> inviterData,
    UserProvider userProvider,
  ) async {
    if (inviterData['partnershipId'] != null) {
      throw Exception('Ng∆∞·ªùi t·∫°o m√£ m·ªùi ƒë√£ c√≥ ƒë·ªëi t√°c');
    }

    final displayName = inviterData['displayName']?.toString();
    if (displayName == null || displayName.trim().isEmpty) {
      throw Exception('T√†i kho·∫£n ng∆∞·ªùi m·ªùi kh√¥ng h·ª£p l·ªá');
    }

    final inviterEmail = inviterData['email']?.toString();
    if (inviterEmail == null || inviterEmail.trim().isEmpty) {
      throw Exception('T√†i kho·∫£n ng∆∞·ªùi m·ªùi ch∆∞a x√°c minh email');
    }
  }

  // ============ UTILITY METHODS ============

  Future<void> _clearUserInviteCode(String userId) async {
    try {
      final userSnapshot = await _dbRef.child('users').child(userId).get();
      if (userSnapshot.exists) {
        final userData = userSnapshot.value as Map<dynamic, dynamic>;
        final currentCode = userData['currentInviteCode'] as String?;

        if (currentCode != null) {
          await _dbRef.child('inviteCodes').child(currentCode).remove();
        }
      }

      await _dbRef.child('users').child(userId).update({
        'currentInviteCode': null,
        'inviteCodeExpiry': null,
        'updatedAt': ServerValue.timestamp,
      });

      debugPrint('üßπ ƒê√£ x√≥a m√£ m·ªùi c≈© c·ªßa user: $userId');
    } catch (e) {
      debugPrint('‚ö†Ô∏è L·ªói khi x√≥a m√£ m·ªùi c≈©: $e');
    }
  }

  Future<void> _clearExpiredInviteCode(String inviteCode) async {
    try {
      final codeSnapshot = await _dbRef
          .child('inviteCodes')
          .child(inviteCode)
          .get();
      if (codeSnapshot.exists) {
        final codeData = codeSnapshot.value as Map<dynamic, dynamic>;
        final userId = codeData['userId'] as String?;

        if (userId != null) {
          await _dbRef.child('users').child(userId).update({
            'currentInviteCode': null,
            'inviteCodeExpiry': null,
            'updatedAt': ServerValue.timestamp,
          });
        }
      }

      await _dbRef.child('inviteCodes').child(inviteCode).remove();
      debugPrint('üßπ ƒê√£ x√≥a m√£ m·ªùi h·∫øt h·∫°n: $inviteCode');
    } catch (e) {
      debugPrint('‚ö†Ô∏è L·ªói khi x√≥a m√£ m·ªùi h·∫øt h·∫°n: $e');
    }
  }

  String _generateRandomCode() {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    final random = Random();
    return String.fromCharCodes(
      Iterable.generate(
        6,
        (_) => chars.codeUnitAt(random.nextInt(chars.length)),
      ),
    );
  }

  Future<bool> _checkInviteCodeUniqueness(String code) async {
    try {
      final snapshot = await _dbRef
          .child('inviteCodes')
          .child(code.toUpperCase())
          .get();

      if (!snapshot.exists) {
        return true;
      }

      final codeData = snapshot.value as Map<dynamic, dynamic>;
      final expiry = codeData['expiryTime'] as int?;

      if (expiry != null && DateTime.now().millisecondsSinceEpoch > expiry) {
        await _clearExpiredInviteCode(code);
        return true;
      }

      return false;
    } catch (e) {
      debugPrint('‚ùå L·ªói khi ki·ªÉm tra unique: $e');
      throw Exception('Kh√¥ng th·ªÉ ki·ªÉm tra t√≠nh duy nh·∫•t c·ªßa m√£: $e');
    }
  }

  // ============ PUBLIC UTILITY METHODS ============

  Future<void> cancelInviteCode(UserProvider userProvider) async {
    if (userProvider.currentUser == null) {
      throw Exception('Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p');
    }

    try {
      await _clearUserInviteCode(userProvider.currentUser!.uid);
      debugPrint('‚úÖ ƒê√£ h·ªßy m√£ m·ªùi');
    } catch (e) {
      debugPrint('‚ùå L·ªói khi h·ªßy m√£ m·ªùi: $e');
      rethrow;
    }
  }

  Future<String?> getActiveInviteCode(UserProvider userProvider) async {
    if (userProvider.currentUser == null) return null;

    try {
      final snapshot = await _dbRef
          .child('users')
          .child(userProvider.currentUser!.uid)
          .get();

      if (!snapshot.exists) return null;

      final userData = snapshot.value as Map<dynamic, dynamic>;
      final inviteCode = userData['currentInviteCode'] as String?;
      final expiry = userData['inviteCodeExpiry'] as int?;

      if (inviteCode == null) return null;

      if (expiry != null && DateTime.now().millisecondsSinceEpoch > expiry) {
        await cancelInviteCode(userProvider);
        return null;
      }

      final codeSnapshot = await _dbRef
          .child('inviteCodes')
          .child(inviteCode)
          .get();
      if (!codeSnapshot.exists) {
        await _clearUserInviteCode(userProvider.currentUser!.uid);
        return null;
      }

      return inviteCode;
    } catch (e) {
      debugPrint('‚ùå L·ªói khi l·∫•y m√£ m·ªùi ho·∫°t ƒë·ªông: $e');
      return null;
    }
  }

  Future<Map<String, dynamic>> validateInviteCode(String inviteCode) async {
    if (inviteCode.length != 6) {
      return {'valid': false, 'reason': 'M√£ m·ªùi ph·∫£i c√≥ 6 k√Ω t·ª±'};
    }

    try {
      final codeSnapshot = await _dbRef
          .child('inviteCodes')
          .child(inviteCode.toUpperCase())
          .get();

      if (!codeSnapshot.exists) {
        return {'valid': false, 'reason': 'M√£ m·ªùi kh√¥ng t·ªìn t·∫°i'};
      }

      final codeData = codeSnapshot.value as Map<dynamic, dynamic>;

      if (codeData['isActive'] != true) {
        return {'valid': false, 'reason': 'M√£ m·ªùi kh√¥ng c√≤n ho·∫°t ƒë·ªông'};
      }

      final expiry = codeData['expiryTime'] as int?;
      if (expiry != null && DateTime.now().millisecondsSinceEpoch > expiry) {
        return {'valid': false, 'reason': 'M√£ m·ªùi ƒë√£ h·∫øt h·∫°n'};
      }

      final inviterUid = codeData['userId'] as String;
      final inviterSnapshot = await _dbRef
          .child('users')
          .child(inviterUid)
          .get();

      if (!inviterSnapshot.exists) {
        return {'valid': false, 'reason': 'Ng∆∞·ªùi t·∫°o m√£ m·ªùi kh√¥ng t·ªìn t·∫°i'};
      }

      final inviterData = inviterSnapshot.value as Map<dynamic, dynamic>;
      if (inviterData['partnershipId'] != null) {
        return {'valid': false, 'reason': 'Ng∆∞·ªùi t·∫°o m√£ m·ªùi ƒë√£ c√≥ ƒë·ªëi t√°c'};
      }

      return {
        'valid': true,
        'inviterName': codeData['userDisplayName'] ?? 'Ng∆∞·ªùi d√πng',
        'inviterEmail': codeData['userEmail'] ?? '',
      };
    } catch (e) {
      return {'valid': false, 'reason': 'L·ªói khi ki·ªÉm tra m√£ m·ªùi'};
    }
  }

  Future<Partnership?> getPartnershipDetails(String partnershipId) async {
    try {
      final snapshot = await _dbRef
          .child('partnerships')
          .child(partnershipId)
          .get();

      if (!snapshot.exists) return null;

      return Partnership.fromSnapshot(snapshot);
    } catch (e) {
      debugPrint('‚ùå L·ªói khi l·∫•y th√¥ng tin partnership: $e');
      return null;
    }
  }

  Future<AppUser?> getPartnerProfile(String partnerUid) async {
    try {
      final snapshot = await _dbRef.child('users').child(partnerUid).get();

      if (!snapshot.exists) return null;

      final userData = snapshot.value as Map<dynamic, dynamic>;
      return AppUser.fromMap(userData, partnerUid);
    } catch (e) {
      debugPrint('‚ùå L·ªói khi l·∫•y th√¥ng tin ƒë·ªëi t√°c: $e');
      return null;
    }
  }

  void unawaited(Future<void> future) {
    future.catchError((error) {
      debugPrint('Unawaited partnership service error: $error');
    });
  }

  Future<Map<String, dynamic>> getPartnershipStatistics(
    UserProvider userProvider,
  ) async {
    if (!userProvider.hasPartner) {
      return {};
    }

    try {
      debugPrint('üìä ƒêang t√≠nh th·ªëng k√™ partnership...');

      final partnership = await getPartnershipDetails(
        userProvider.partnershipId!,
      );
      if (partnership == null) {
        return {};
      }

      // Calculate partnership duration
      final now = DateTime.now();
      final duration = now.difference(partnership.createdAt);

      // Get shared transactions (would need DataService implementation)
      // For now, return basic statistics
      final statistics = {
        'duration': {
          'days': duration.inDays,
          'months': (duration.inDays / 30).round(),
          'years': (duration.inDays / 365).round(),
        },
        'partnership': {
          'createdAt': partnership.createdAt.toIso8601String(),
          'memberCount': partnership.memberIds.length,
          'isActive': partnership.isActive,
        },
        'financial': {
          'totalSharedExpenses': 0.0,
          'totalSharedIncome': 0.0,
          'sharedBalance': 0.0,
          'transactionCount': 0,
        },
      };

      debugPrint('‚úÖ ƒê√£ t√≠nh th·ªëng k√™ partnership');
      return statistics;
    } catch (e) {
      debugPrint('‚ùå L·ªói khi t√≠nh th·ªëng k√™ partnership: $e');
      return {};
    }
  }

  /// ‚úÖ NEW: Check if partnership already exists between two users
  Future<String?> _findExistingPartnership(String uid1, String uid2) async {
    try {
      debugPrint(
        'üîç Checking for existing partnership between $uid1 and $uid2',
      );

      final partnershipsSnapshot = await _dbRef.child('partnerships').get();

      if (!partnershipsSnapshot.exists) {
        debugPrint('   No partnerships found');
        return null;
      }

      final partnershipsData =
          partnershipsSnapshot.value as Map<dynamic, dynamic>;

      for (final entry in partnershipsData.entries) {
        final partnershipId = entry.key as String;
        final data = entry.value as Map<dynamic, dynamic>;

        final isActive = data['isActive'] as bool? ?? true;
        if (!isActive) continue;

        final memberIds = data['memberIds'] as Map<dynamic, dynamic>?;
        if (memberIds == null) continue;

        final members = memberIds.keys.toList();

        if (members.contains(uid1) && members.contains(uid2)) {
          debugPrint('   ‚úÖ Found existing partnership: $partnershipId');
          return partnershipId;
        }
      }

      debugPrint('   ‚ÑπÔ∏è No existing partnership found');
      return null;
    } catch (e) {
      debugPrint('‚ùå Error checking existing partnership: $e');
      return null;
    }
  }
}
